#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

PS1='[\u@\h \W]\$ '
. "$HOME/.cargo/env"

##-----------------------------------------------------
## better-ls
if [ -f /home/will/.config/synth-shell/better-ls.sh ] && [ -n "$( echo $- | grep i )" ]; then
	source /home/will/.config/synth-shell/better-ls.sh
fi

##-----------------------------------------------------
## alias
if [ -f /home/will/.config/synth-shell/alias.sh ] && [ -n "$( echo $- | grep i )" ]; then
	source /home/will/.config/synth-shell/alias.sh
fi

##-----------------------------------------------------
## better-history
if [ -f /home/will/.config/synth-shell/better-history.sh ] && [ -n "$( echo $- | grep i )" ]; then
	source /home/will/.config/synth-shell/better-history.sh
fi

##-----------------------------------------------------
## prompt
if [ -f /home/will/.config/synth-shell/synth-shell-prompt.sh ] && [ -n "$( echo $- | grep i )" ]; then
	source /home/will/.config/synth-shell/synth-shell-prompt.sh
fi

##-----------------------------------------------------
## synth-shell-greeter.sh
# if [ -f /home/will/.config/synth-shell/synth-shell-greeter.sh ] && [ -n "$( echo $- | grep i )" ]; then
# 	source /home/will/.config/synth-shell/synth-shell-greeter.sh
# fi

##-----------------------------------------------------
## Programs setup

# Haskell setup
[ -f "/home/will/.ghcup/env" ] && source "/home/will/.ghcup/env"

# Zoxide
eval "$(zoxide init bash)"

# Set up Node Version Manager
source /usr/share/nvm/init-nvm.sh

export EDITOR=nvim

# thefuck setup
eval $(thefuck --alias)
alias oops="fuck"

##-----------------------------------------------------
## Custom functions
# Make a folder and move into it
# If the folder already existed, move into it and ls
function mkz ()
{
  mkdir -p -- "$1" && z -P -- "$1"
}

function mkzl ()
{
  mkdir -p -- "$1" && z -P -- "$1"
}

function zl() {
    DIR="$*";
	# if no DIR given, go home
	if [ $# -lt 1 ]; then 
		DIR=$HOME;
    fi;
    z "${DIR}" && ls
}

##-----------------------------------------------------
## Aliases
alias nvp="nvimpager"
alias v="nvim"
alias sv="sudoedit"

# Stop accidentally trashing things
alias rm="trash"

alias dvkb="setxkbmap -model pc105 -layout us\(dvorak\),us -option caps:swapescape,grp:ctrls_toggle; xmodmap -e \"keycode 135 = Super_R Super_R\""
alias dv_kb="dvkb"
alias sus="systemctl suspend"

alias wget="wget -c"

# Ancestor traversal
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'

# GitHub
# Add commit aliases here some time
alias ga="git add ."
alias gcm="git commit"
alias gph="git push"
alias gpl="git pull"
alias gof="git origin fetch"

# Python
alias vea="source ./.venv/bin/activate"

# Kitty
alias icat="kitten icat"

# Navigation

# Spelling mistakes
alias sl="ls"
alias lz="zl"

# config things
alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

# Sensible-bash

# Prevent file overwrite on stdout redirection
# Use `>|` to force redirection to an existing file
set -o noclobber

# Update window size after every command
shopt -s checkwinsize

# Automatically trim long paths in the prompt (requires Bash 4.x)
PROMPT_DIRTRIM=2

# Enable history expansion with space
# E.g. typing !!<space> will replace the !! with your last command
bind Space:magic-space

# Turn on recursive globbing (enables ** to recurse all directories)
shopt -s globstar 2> /dev/null

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

## SMARTER TAB-COMPLETION (Readline bindings) ##

# Perform file completion in a case insensitive fashion
bind "set completion-ignore-case on"

# Treat hyphens and underscores as equivalent
bind "set completion-map-case on"

# Display matches for ambiguous patterns at first tab press
bind "set show-all-if-ambiguous on"

# Immediately add a trailing slash when autocompleting symlinks to directories
bind "set mark-symlinked-directories on"

## SANE HISTORY DEFAULTS ##

# Append to the history file, don't overwrite it
shopt -s histappend

# Save multi-line commands as one command
shopt -s cmdhist

# Record each line as it gets issued
# PROMPT_COMMAND='history -a'

# Huge history. Doesn't appear to slow things down, so why not?
HISTSIZE=500000
HISTFILESIZE=100000

# Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"

# Use standard ISO 8601 timestamp
# %F equivalent to %Y-%m-%d
# %T equivalent to %H:%M:%S (24-hours format)
HISTTIMEFORMAT='%F %T '

# Enable incremental history search with up/down arrows (also Readline goodness)
# Learn more about this here: http://codeinthehole.com/writing/the-most-important-command-line-tip-incremental-history-searching-with-inputrc/
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
bind '"\e[C": forward-char'
bind '"\e[D": backward-char'

## BETTER DIRECTORY NAVIGATION ##

# Prepend cd to directory names automatically
shopt -s autocd 2> /dev/null
# Correct spelling errors during tab-completion
shopt -s dirspell 2> /dev/null
# Correct spelling errors in arguments supplied to cd
shopt -s cdspell 2> /dev/null

# This defines where cd looks for targets
# Add the directories you want to have fast access to, separated by colon
# Ex: CDPATH=".:~:~/projects" will look for targets in the current working directory, in home and in the ~/projects folder
CDPATH="."

# This allows you to bookmark your favorite places across the file system
# Define a variable containing a path and you will be able to cd into it regardless of the directory you're in
shopt -s cdable_vars

# Examples:
# export dotfiles="$HOME/dotfiles"
# export projects="$HOME/projects"
# export documents="$HOME/Documents"

# Vim mode, very important
set -o vi

# Needed for GPG I guess
GPG_TTY=`tty`
export GPG_TTY

# Created by `pipx` on 2024-08-03 06:08:30
export PATH="$PATH:/home/will/.local/bin"

# pnpm
export PNPM_HOME="/home/will/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
